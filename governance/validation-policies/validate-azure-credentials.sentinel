# Policy that validates Azure credentials provided to Azure secrets engine and auth method
# This is intended to be used against paths of form <path>/config or auth/<path>/config
# where <path> is the path selected for the Azure secrets engine or auth method respectively.
# However, because EGP policies can only use wildcard (*) at the end of paths,
# We apply this policy to all paths that have the tenant_id,
# client_id, and client_secret keys which are all used by both the Azure secrets engine and
# auth method.
# If all 3 are present, we also check whether subscription_id is present and then validate
# it since it is used by the Azure secrets engine.

# Function that validates Azure credentials
validate_azure_creds = func() {

  # Booleans indicating whether credentials are valid
  subscription_id = true
  tenant_id = true
  client_id = true
  client_secret = true

  # Print some information about the request
  # Note that these messages will only be printed when the policy is violated
  print("Namespace path:", namespace.path)
  print("Request path:", request.path)
  print("Request data:", request.data)

  # Validate credential keys of secrets that have tenant_id, client_id, and client_secret
  # We don't require subscription_id since it is not used by the Azure auth method
  # But we do test it if it is present since it is used by the Azure secrets engine.
  if "tenant_id" in keys(request.data) and "client_id" in keys(request.data) and
     "client_secret" in keys(request.data) {
    if "subscription_id" in keys(request.data) {
  		if request.data.subscription_id not matches "^[0-9a-z]{8}-[0-9a-z]{4}-[0-9a-z]{4}-[0-9a-z]{4}-[0-9a-z]{12}$" {
      	print("Invalid Azure subscription ID")
    		subscription_id = false
    	}
    }
    if request.data.tenant_id not matches "^[0-9a-z]{8}-[0-9a-z]{4}-[0-9a-z]{4}-[0-9a-z]{4}-[0-9a-z]{12}$" {
      print("Invalid Azure tenant ID")
    	tenant_id = false
    }
  	if request.data.client_id not matches "^[0-9a-z]{8}-[0-9a-z]{4}-[0-9a-z]{4}-[0-9a-z]{4}-[0-9a-z]{12}$" {
      print("Invalid Azure client ID")
    	client_id = false
    }
  	if request.data.client_secret not matches "^[0-9a-z]{8}-[0-9a-z]{4}-[0-9a-z]{4}-[0-9a-z]{4}-[0-9a-z]{12}$" {
      print("Invalid Azure client secret")
    	client_secret = false
    }
  }


  # Return combined booleans
  return subscription_id and tenant_id and client_id and client_secret

}

# Main Rule
main = rule {
  validate_azure_creds()
}
